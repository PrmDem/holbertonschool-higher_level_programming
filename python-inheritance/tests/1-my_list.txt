Test cases for ``1-my_list`` module
======================

Using ``print_sorted``
-------------------

Getting ``print_sorted`` from the ``1-my_list`` module:

>>> print_sorted = __import__('1-my_list').MyList.print_sorted


Basic case use:

>>> print_sorted([2, 7, 15, 4, 21])
[2, 4, 7, 15, 21]


Only one number:

>>> print_sorted([1])
[1]


Duplicates of a number:

>>> print_sorted([1, 4, 7, 81, 1])
[1, 1, 4, 7, 81]


All the same number:

>>> print_sorted([2, 2, 2])
[2, 2, 2]


List is empty:

>>> print_sorted([])
[]


List contains positive and negative integers:

>>> print_sorted([-1, 7, -19, 21, 0])
[-19, -1, 0, 7, 21]


List contains only negative integers:

>>> print_sorted([-11, -8, -64, -33, -2])
[-64, -33, -11, -8, -2]


List only contains floats:

>>> print_sorted([1.4, 7.11, 2.24])
[1.4, 2.24, 7.11]


List contains floats and integers:

>>> print_sorted([27, 3.14, 89, 7.77])
[3.14, 7.77, 27, 89]


List contains a string:

>>> print_sorted([1, 16, 4, "Forty"])
Traceback (most recent call last):
    ...
TypeError: '<' not supported between instances of 'str' and 'int'


List contains only strings:

>>> print_sorted(["One", "Two", "Three"])
['One', 'Three', 'Two']
