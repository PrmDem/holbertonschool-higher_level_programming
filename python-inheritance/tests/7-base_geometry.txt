Test cases for ``7-base_geometry`` module
======================

Using ``integer_validator``
-------------------

Importing ``integer_validator`` from the ``7-base_geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Base case:

>>> square = BaseGeometry()
>>> square.integer_validator("area", 12)


Value is a string:

>>> BaseGeometry().integer_validator("area", "number")
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is a boolean:

>>> BaseGeometry().integer_validator("area", True)
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is a float:

>>> BaseGeometry().integer_validator("area", 17.9)
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is a list of integers:

>>> BaseGeometry().integer_validator("area", [14, 21, 7, 72])
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is a tuple:

>>> BaseGeometry().integer_validator("area", (1, 4, 5, 7, 9))
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is a dictionary:

>>> BaseGeometry().integer_validator("area", {"one": 1, "two": 2, "three": 3})
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is None:

>>> BaseGeometry().integer_validator("area", None)
Traceback (most recent call last):
    ...
TypeError: area must be an integer


Value is 0:

>>> square = BaseGeometry()
>>> square.integer_validator("area", 0)
Traceback (most recent call last):
    ...
ValueError: area must be greater than 0


Value is less than 0:

>>> square = BaseGeometry()
>>> square.integer_validator("area", -16)
Traceback (most recent call last):
    ...
ValueError: area must be greater than 0
